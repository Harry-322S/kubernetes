
Docker version 20.10.17, build 100c701

{
  apt install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  apt update && apt install -y docker-ce=5:20.10.17~3-0~ubuntu-focal 500
}


apt-cache policy docker-ce

keepalived.conf

global_defs {
    router_id LVS_DEVEL
}
vrrp_script check_apiserver {
  script "/etc/keepalived/check_apiserver.sh"
  interval 3
  weight -2
  fall 10
  rise 2
}

vrrp_instance VI_1 {
    state BACKUP
    interface ens160
    virtual_router_id 51
    priority 100
    authentication {
        auth_type PASS
        auth_pass 42
    }
    virtual_ipaddress {
        172.23.24.249
    }
    track_script {
        check_apiserver
    }
}


sudo cat >> /etc/keepalived/check_apiserver.sh <<EOF
#!/bin/sh

errorExit() {
  echo "*** $@" 1>&2
  exit 1
}

curl --silent --max-time 2 --insecure https://localhost:6443/ -o /dev/null || errorExit "Error GET https://localhost:6443/"
if ip addr | grep -q 172.23.24.249; then
  curl --silent --max-time 2 --insecure https://172.23.24.249:6443/ -o /dev/null || errorExit "Error GET https://172.23.24.249:6443/"
fi
EOF

chmod +x /etc/keepalived/check_apiserver.sh



IN the haproxy.conf

#---------------------------------------------------------------------
# apiserver frontend which proxys to the control plane nodes
#---------------------------------------------------------------------
frontend apiserver
    bind *:8443
    mode tcp
    option tcplog
    default_backend apiserver

#---------------------------------------------------------------------
# round robin balancing for apiserver
#---------------------------------------------------------------------
backend apiserver
    option httpchk GET /healthz
    http-check expect status 200
    mode tcp
    option ssl-hello-chk
    balance     roundrobin
        server drk8smaster1 172.23.24.145:6443 check fall 3 rise 2
        server drk8smaster2 172.23.24.141:6443 check fall 3 rise 2
        server drk8smaster3 172.23.24.125:6443 check fall 3 rise 2

        # [...]

sudo mkdir /etc/docker
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
sudo systemctl enable docker
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo kubeadm reset


To start using your cluster, you need to run the following as a regular user:

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

You can now join any number of the control-plane node running the following command on each as root:

  kubeadm join 172.23.24.249:8443 --token rlzzf5.3je7r5z7nclh21o0 \
        --discovery-token-ca-cert-hash sha256:13aaa9ae67928ebb02f56d15f1a6f3490b55059eba4801ef3dbc5839525204b9 \
        --control-plane --certificate-key 6ac4758271a9a19c991c7733cf7754bf52c5e9f81c06077584388c75a17ec6a1 --apiserver-advertise-address=172.23.24.125

Please note that the certificate-key gives access to cluster sensitive data, keep it secret!
As a safeguard, uploaded-certs will be deleted in two hours; If necessary, you can use
"kubeadm init phase upload-certs --upload-certs" to reload certs afterward.

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.23.24.249:8443 --token rlzzf5.3je7r5z7nclh21o0 \
        --discovery-token-ca-cert-hash sha256:13aaa9ae67928ebb02f56d15f1a6f3490b55059eba4801ef3dbc5839525204b9







In order to address the error (dial tcp 127.0.0.1:10248: connect: connection refused.), run the following:

sudo mkdir /etc/docker
cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "exec-opts": ["native.cgroupdriver=systemd"],
  "insecure-registries":["172.23.21.36:8080"], 
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m",
	"max-file": "3"
  }
}
EOF
sudo systemctl enable docker
sudo systemctl daemon-reload
sudo systemctl restart docker
sudo kubeadm reset

-----------certifiacte expiry information checking -----------

kubeadm certs check-expiration
